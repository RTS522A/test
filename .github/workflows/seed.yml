name: seed
on:
  workflow_dispatch:

jobs:
  test:
      runs-on: windows-latest
      steps:
      - uses: actions/checkout@v2
      - name: Build
        run: |
          pip install libtorrent
          Invoke-WebRequest -Uri 'https://wimlib.net/downloads/wimlib-1.13.6-windows-x86_64-bin.zip' -OutFile wimlib.zip

          $elapsedTime = [system.diagnostics.stopwatch]::StartNew()
          $MyScript = {
            python upload.py

              
          }
          $JobGUID = [system.Guid]::NewGuid()
          $elapsedEventHandler = {
            param ([System.Object]$sender, [System.Timers.ElapsedEventArgs]$e)
            ($sender -as [System.Timers.Timer]).Stop()
            Unregister-Event -SourceIdentifier $JobGUID
            $duration = $elapsedTime.Elapsed.ToString("hh\:mm\:ss")
            Write-Host $duration ": Job $JobGUID removed by force as it exceeded timeout!"
            Get-Job -Name $JobGUID | Remove-Job -Force
          }
          $timer = New-Object System.Timers.Timer -ArgumentList 60000 #just change the timeout here
          Register-ObjectEvent -InputObject $timer -EventName Elapsed -Action $elapsedEventHandler -SourceIdentifier $JobGUID
          $timer.Start()
          $job = Start-Job -ScriptBlock $MyScript -Name $JobGUID
          while ($true) {
            
            $duration = $elapsedTime.Elapsed.ToString("hh\:mm\:ss")
            Write-Host $duration ":" $job.JobStateInfo.State
            if ($result = $job | Receive-Job ) {
              $duration = $elapsedTime.Elapsed.ToString("hh\:mm\:ss")
              Write-Host $duration ":" $result
            }
            if('Running' -ne $job.JobStateInfo.State) {
              $elapsedTime.Stop()
              $duration = $elapsedTime.Elapsed.ToString("hh\:mm\:ss")
              Write-Host $duration ": JOB DONE"
              break
            }
            Start-Sleep -s 5
          }
          
      - uses: actions/upload-artifact@v3
        with:
          name: mytorrent.torrent
          path: mytorrent.torrent
